generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model administrator {
  id      String    @id @db.VarChar(15)
  name    String?   @db.VarChar(45)
  inquiry inquiry[]
}

model baseCategory {
  id               Int              @id @default(autoincrement())
  vendorId         Int
  categoryName     String           @db.VarChar(45)
  subcategoryName  String           @db.VarChar(45)
  categorySettings categorySettings @relation(fields: [subcategoryName], references: [name], onDelete: NoAction, onUpdate: NoAction, map: "categorySettingsName")
  vendor           vendor           @relation(fields: [vendorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vendorId")
  baseSettings     baseSettings?
  work             work[]

  @@index([subcategoryName], map: "categorySettingsNameIdx")
  @@index([vendorId], map: "vendorIdIdx")
}

model baseSettings {
  id              Int          @id @default(autoincrement())
  objectPath      String?      @db.VarChar(255)
  baseTexturePath String       @db.VarChar(255)
  thumbnailPath   String       @db.VarChar(255)
  unitPrice       Int
  createdAt       DateTime
  deletedAt       DateTime?
  baseCategory    baseCategory @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "T_CategoryId")
}

model cart {
  workId   String @db.Char(12)
  userId   String @db.VarChar(45)
  quantity Int    @db.SmallInt
  user     user   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userId")
  work     work   @relation(fields: [workId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workId")

  @@id([workId, userId])
  @@index([userId], map: "userIdIdx")
}

model categorySettings {
  name          String         @id @db.VarChar(45)
  thumbnailPath String?        @db.VarChar(255)
  createdAt     DateTime?
  baseCategory  baseCategory[]
}

model deliveryAddress {
  userId             String   @db.VarChar(15)
  updatedAt          DateTime
  zipCode            String   @db.Char(7)
  address            String   @db.VarChar(255)
  familyname         String   @db.VarChar(15)
  firstname          String   @db.VarChar(15)
  familynameFurigana String   @db.VarChar(45)
  firstnameFurigana  String   @db.VarChar(45)
  user               user     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userIdDeliveryAddr")

  @@id([userId, updatedAt])
}

model deliveryStatus {
  purchaseRecordId   String          @id @db.VarChar(20)
  datetimeScheduled  String?         @db.VarChar(20)
  currentStatus      String?         @db.VarChar(45)
  zipCode            String?         @db.Char(7)
  address            String          @db.VarChar(255)
  familyname         String          @db.VarChar(15)
  firstname          String          @db.VarChar(15)
  familynameFurigana String?         @db.VarChar(45)
  firstnameFurigana  String?         @db.VarChar(45)
  datetimeResults    DateTime?
  updatedAt          DateTime?
  purchaseHistory    purchaseHistory @relation(fields: [purchaseRecordId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "purchaseRecordId")
}

model favoritedUser {
  favoriteFrom                        String   @db.VarChar(15)
  favoriteTo                          String   @db.VarChar(15)
  favoritedAt                         DateTime
  userFavoritedUserFavoriteFromTouser user     @relation("favoritedUserFavoriteFromTouser", fields: [favoriteFrom], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userIdFavUserFrom")
  userFavoritedUserFavoriteToTouser   user     @relation("favoritedUserFavoriteToTouser", fields: [favoriteTo], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userIdFavUserTo")

  @@id([favoriteFrom, favoriteTo])
  @@index([favoriteTo], map: "userIdFavUserToIdx")
}

model favoritedUserNumber {
  favoritedToId String @id @db.VarChar(15)
  number        Int    @default(0)
  user          user   @relation(fields: [favoritedToId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userIdFavnumUser")
}

model favoritedWork {
  favoriteFrom String   @db.VarChar(15)
  favoriteTo   String   @db.Char(12)
  favoritedAt  DateTime
  user         user     @relation(fields: [favoriteFrom], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userIdFavWork")
  work         work     @relation(fields: [favoriteTo], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workIdFavWork")

  @@id([favoriteFrom, favoriteTo])
  @@index([favoriteTo], map: "FWorkIDIdx")
}

model favoritedWorkNumber {
  favoritedToId String @id @db.Char(12)
  number        Int    @default(0)
  work          work   @relation(fields: [favoritedToId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "favoritedToId")
}

model inquiry {
  id              Int           @id @default(autoincrement())
  userId          String        @db.VarChar(15)
  category        Int           @db.SmallInt
  description     Json
  name            String        @db.VarChar(45)
  mailAddress     String        @db.VarChar(255)
  status          String        @db.VarChar(45)
  reply           Json?
  replyedByUserId String        @db.VarChar(15)
  postedAt        DateTime
  updatedAt       DateTime
  administrator   administrator @relation(fields: [replyedByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "adminIdInq")
  user            user          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userIdInq")

  @@index([replyedByUserId], map: "adminIdInqIdx")
  @@index([userId], map: "idUserIdx")
}

model mailConfirmation {
  userId            String   @db.VarChar(15)
  datetimeIssue     DateTime
  mailaddressNew    String?  @db.VarChar(255)
  tokenConfirmation String   @db.Char(4)
  user              user     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userIdMainConfim")

  @@id([userId, datetimeIssue])
}

model passwordReset {
  id            String   @db.VarChar(15)
  datetimeIssue DateTime
  tempPassword  String   @db.VarChar(255)
  token         String   @unique(map: "tokenUNIQUE") @db.Char(32)
  user          user     @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userIdPassReset")

  @@id([id, datetimeIssue])
}

model purchaseHistory {
  id                   String                 @id @db.VarChar(20)
  userId               String                 @db.VarChar(15)
  numberInvoice        String?                @db.VarChar(20)
  purchasedAt          DateTime?
  paymentMethod        String                 @db.VarChar(45)
  user                 user                   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userIdPurchase")
  deliveryStatus       deliveryStatus?
  purchasedHistoryItem purchasedHistoryItem[]

  @@index([userId], map: "userIdIndex")
}

model purchasedHistoryItem {
  purchaseHistoryId String          @db.VarChar(20)
  workId            String          @db.Char(12)
  quantity          Int             @db.SmallInt
  purchaseHistory   purchaseHistory @relation(fields: [purchaseHistoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "purchaseHistoryId")
  work              work            @relation(fields: [workId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workId")

  @@id([purchaseHistoryId, workId])
  @@index([workId], map: "workIdIdx")
}

model report {
  id                                 Int      @id @default(autoincrement())
  reportedToUserId                   String   @db.VarChar(15)
  reportedFromUserId                 String   @db.VarChar(15)
  categoryId                         Int      @db.SmallInt
  reportedDescription                String   @db.Text
  reportedAt                         DateTime
  userReportReportedFromUserIdTouser user     @relation("reportReportedFromUserIdTouser", fields: [reportedFromUserId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userIdReportFrom")
  userReportReportedToUserIdTouser   user     @relation("reportReportedToUserIdTouser", fields: [reportedToUserId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userIdReportTo")

  @@index([reportedToUserId], map: "FUserIdIdx1")
  @@index([reportedFromUserId], map: "userIdReportFromIdx")
}

model sampleImages {
  id               Int       @id @default(autoincrement())
  sampleImagesPath String?   @db.VarChar(255)
  addedAt          DateTime?
}

model stampSettings {
  id             Int              @id @default(autoincrement())
  name           String           @unique(map: "nameUNIQUE") @db.VarChar(45)
  imgPath        String           @db.VarChar(255)
  unitPrice      Int
  workUsedStamps workUsedStamps[]
}

model tempdeliverysettings {
  userId                        String   @id @db.VarChar(15)
  estimatedDeliveryDate         DateTime
  estimatedDeliveryTimeCategory String   @db.VarChar(45)
  effectiveDate                 DateTime
}

model user {
  id                                           String               @id @db.VarChar(15)
  name                                         String               @db.VarChar(45)
  password                                     String               @db.VarChar(255)
  mailaddress                                  String               @unique(map: "mailaddressUNIQUE") @db.VarChar(255)
  iconPath                                     String?              @db.VarChar(255)
  selfIntroduction                             String?              @db.Text
  cardnumber                                   String?              @db.Char(16)
  nameCard                                     String?              @db.VarChar(45)
  expiration                                   String?              @db.Char(4)
  createdAt                                    DateTime
  deletedAt                                    DateTime?
  cart                                         cart[]
  deliveryAddress                              deliveryAddress[]
  favoritedUserFavoritedUserFavoriteFromTouser favoritedUser[]      @relation("favoritedUserFavoriteFromTouser")
  favoritedUserFavoritedUserFavoriteToTouser   favoritedUser[]      @relation("favoritedUserFavoriteToTouser")
  favoritedUserNumber                          favoritedUserNumber?
  favoritedWork                                favoritedWork[]
  inquiry                                      inquiry[]
  mailConfirmation                             mailConfirmation[]
  passwordReset                                passwordReset[]
  purchaseHistory                              purchaseHistory[]
  reportReportReportedFromUserIdTouser         report[]             @relation("reportReportedFromUserIdTouser")
  reportReportReportedToUserIdTouser           report[]             @relation("reportReportedToUserIdTouser")
  work                                         work[]

  @@index([id], map: "idIdx")
  @@index([mailaddress], map: "mailaddressIdx")
  @@index([name], map: "nameIdx")
}

model vendor {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  baseCategory baseCategory[]
}

model work {
  id                   String                 @id @db.Char(12)
  createdByUserId      String                 @db.VarChar(15)
  baseCategoryId       Int
  name                 String                 @db.VarChar(40)
  workTexPath          String                 @unique(map: "workTexPathUNIQUE") @db.VarChar(255)
  thumbnailPath        String                 @unique(map: "thumbnailPathUNIQUE") @db.VarChar(255)
  flagPublic           Boolean
  unitPrice            Decimal                @db.Money
  hashtag              Json?
  introduction         String?                @db.VarChar(255)
  numOfImages          Int?                   @default(0) @db.SmallInt
  createAt             DateTime
  baseCategory         baseCategory           @relation(fields: [baseCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "categoryId")
  user                 user                   @relation(fields: [createdByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userIdWork")
  cart                 cart[]
  favoritedWork        favoritedWork[]
  favoritedWorkNumber  favoritedWorkNumber?
  purchasedHistoryItem purchasedHistoryItem[]
  workUsedStamps       workUsedStamps[]

  @@index([createdByUserId], map: "FUserIdIdx")
  @@index([baseCategoryId], map: "categoryIdIdx")
}

model workUsedStamps {
  workId          String        @db.Char(12)
  stampSettingsId Int
  numUsed         Int?
  stampSettings   stampSettings @relation(fields: [stampSettingsId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "idStamp")
  work            work          @relation(fields: [workId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "idWork")

  @@id([workId, stampSettingsId])
  @@index([stampSettingsId], map: "idStampIdx")
}
