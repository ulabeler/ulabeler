<!DOCTYPE html>
<html lang="ja">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- three.jsを利用 -->
    <title>Document</title>
</head>


<body>
    <!-- "/models/EMISTIA_fbx2.fbx"を、three.jsを用いて表示させる。 -->
    <canvas id="canvas">
    </canvas>
</body>


<script type="module">
    import * as THREE from '/javascripts/threejs/build/three.module.js';
    import Stats from '/javascripts/threejs/jsm/libs/stats.module.js';
    import { OrbitControls } from '/javascripts/threejs/jsm/controls/OrbitControls.js';
    import { FBXLoader } from '/javascripts/threejs/jsm/loaders/FBXLoader.js';

    //"/models/EMISTIA_fbx2.fbx"を、three.jsを用いて表示させる。
    const canvas = document.querySelector('#canvas');
    const renderer = new THREE.WebGLRenderer({
        canvas: canvas,
        antialias: true
    });
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(0x000000, 1.0);

    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.set(0, 0, 5);
    camera.lookAt(0, 0, 0);

    const controls = new OrbitControls(camera, canvas);
    controls.enableDamping = true;
    controls.dampingFactor = 0.25;
    controls.enableZoom = true;

    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
    directionalLight.position.set(0, 0, 1);
    scene.add(directionalLight);

    const loader = new FBXLoader();
    loader.load('/models/Sony_Xperia_1_III_Purple_LowPoly.FBX', (object) => {
        scene.add(object);
        object.scale.set(0.1, 0.1, 0.1);
        object.position.set(0, 0, 0);
        object.rotation.set(0, 0, 0);
        object.traverse((child) => {
            if (child.isMesh) {
                child.castShadow = true;
                child.receiveShadow = true;
            }
        });
    });

    const stats = new Stats();
    document.body.appendChild(stats.dom);

    const animate = () => {
        requestAnimationFrame(animate);
        renderer.render(scene, camera);
        stats.update();
    };
    animate();

    window.addEventListener('resize', () => {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
    }, false);
</script>


</html>